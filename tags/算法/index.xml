<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>算法 on 青椒肉丝-Qingjrs</title><link>https://qingjrs.com/tags/%E7%AE%97%E6%B3%95/</link><description>Recent content in 算法 on 青椒肉丝-Qingjrs</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 26 Jul 2022 10:16:04 +0800</lastBuildDate><atom:link href="https://qingjrs.com/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml"/><item><title>道格拉斯-普克算法</title><link>https://qingjrs.com/posts/%E9%81%93%E6%A0%BC%E6%8B%89%E6%96%AF-%E6%99%AE%E5%85%8B%E7%AE%97%E6%B3%95/</link><pubDate>Tue, 26 Jul 2022 10:16:04 +0800</pubDate><guid>https://qingjrs.com/posts/%E9%81%93%E6%A0%BC%E6%8B%89%E6%96%AF-%E6%99%AE%E5%85%8B%E7%AE%97%E6%B3%95/</guid><description>一、什么是道格拉斯-普克算法 一种将线段组成的曲线降采样为点数较少的类似曲线的算法
二、思路 给定一条由线段构成的曲线(折线)，找到一条点数较少的相似曲线。该算法根据原曲线与简化曲线之间的最大距离来定义不相似。简化曲线由定义原始曲线的点的子集组成
三、算法 起始曲线是一组有序的点或线，距离维度ε &amp;gt; 0 递归划分线。 最初，它被赋予了第一点和最后一点之间的所有点。它自动标记要保留的第一点和最后一点。然后它找到离以第一点和最后一点为终点的线段最远的点；这个点显然是曲线上离终点之间的近似线段最远的点。如果这个点离线段的距离比_ε_更近，那么在简化曲线不比_ε_差的情况下，可以舍弃任何当前没有标记保留的点 如果离线段最远的点大于近似值_ε_，那么该点必须保留。该算法以第一点和最远点递归调用自身，然后以最远点和最后一点调用自身，其中包括最远点被标记为保留 当递归完成后，可以生成一条新的输出曲线，该曲线由所有且仅由那些被标记为保留的点组成 非参数化的道格拉斯-普克算法 _ε_的选择通常由用户定义。像大多数线拟合/多边形逼近/主点检测方法一样，它可以通过使用数码化/量化引起的误差边界作为终止条件来实现非参数化。 伪代码： function DouglasPeucker(PointList[], epsilon) // Find the point with the maximum distance dmax = 0 index = 0 end = length(PointList) for i = 2 to (end - 1) { d = perpendicularDistance(PointList[i], Line(PointList[1], PointList[end])) if (d &amp;gt; dmax) { index = i dmax = d } } ResultList[] = empty; // If max distance is greater than epsilon, recursively simplify if (dmax &amp;gt; epsilon) { // Recursive call recResults1[] = DouglasPeucker(PointList[1.</description></item></channel></rss>